generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String @id
  github_id    Int    @unique
  username     String
  access_token String @default("")

  created_at DateTime @default(now())
  last_login DateTime

  sessions         Session[]
  ZenodoToken      ZenodoToken[]
  ZenodoDeposition ZenodoDeposition[]
}

model Session {
  id        String   @id
  expiresAt DateTime

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Installation {
  id    Int    @id
  owner String
  repo  String

  installation_id Int

  latest_commit_date    String @default("")
  latest_commit_message String @default("")
  latest_commit_sha     String @default("")
  latest_commit_url     String @default("")

  disabled     Boolean @default(false)
  action_count Int     @default(0)

  issue_number Int @default(0)

  owner_is_organization Boolean @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  CodeMetadata     CodeMetadata?
  CwlValidation    CwlValidation?
  LicenseRequest   LicenseRequest?
  ZenodoDeposition ZenodoDeposition?
}

model LicenseRequest {
  id         String @id @default(cuid())
  identifier String @unique

  contains_license Boolean @default(false)
  license_status   String  @default("")

  license_id      String?
  license_content String  @default("")

  pull_request_url String @default("")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  repository_id Int          @unique
  repository    Installation @relation(fields: [repository_id], references: [id], onDelete: Cascade)
}

model Ping {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
}

model CodeMetadata {
  id         String @id @default(cuid())
  identifier String @unique

  contains_codemeta Boolean @default(false)
  contains_citation Boolean @default(false)
  contains_metadata Boolean @default(false)

  codemeta_status String @default("")
  citation_status String @default("")

  pull_request_url String @default("")

  metadata Json @default("{}")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  repository_id Int          @unique
  repository    Installation @relation(fields: [repository_id], references: [id], onDelete: Cascade)
}

model CwlValidation {
  id         String @id @default(cuid())
  identifier String @unique

  contains_cwl_files Boolean @default(false)
  overall_status     String  @default("")

  files Json @default("[]")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  repository_id Int          @unique
  repository    Installation @relation(fields: [repository_id], references: [id], onDelete: Cascade)
}

model ZenodoToken {
  id String @id @default(cuid())

  token      String
  expires_at DateTime

  refresh_token String

  user_id String @unique
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model ZenodoDeposition {
  id String @id @default(cuid())

  repository_id Int          @unique
  repository    Installation @relation(fields: [repository_id], references: [id], onDelete: Cascade)

  existing_zenodo_deposition_id Boolean? //null, false, true

  zenodo_id       Int?
  zenodo_metadata Json @default("{}")

  last_published_zenodo_doi String?

  github_release_id Int?
  github_tag_name   String?

  status String @default("unpublished") // inProgress, published, error, draft

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Analytics {
  id Int @id

  cwl_validated_file_count Int @default(0)
  cwl_rerun_validation     Int @default(0)

  license_created Int @default(0)

  update_codemeta Int @default(0)
  update_citation Int @default(0)

  create_release Int @default(0)
  zenodo_release Int @default(0)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}
