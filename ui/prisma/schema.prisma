// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id

  username     String
  access_token String
  github_id    Int

  created_at DateTime @default(now())
  last_login DateTime

  sessions Session[]
}

model Session {
  id String @id

  userId    String
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Installation {
  id Int @id @default(autoincrement())

  owner           String
  repo            String
  repository_id   Int
  installation_id Int

  latest_commit_data    String
  latest_commit_message String
  latest_commit_sha     String
  latest_commit_url     String

  disabled     Boolean @default(false)
  issue_number Int

  owner_is_organization Boolean @default(false)

  action_count Int @default(0)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  LicenseRequest LicenseRequest[]
  codeMetadata   codeMetadata[]
  CwlValidation  CwlValidation[]
  Analytics      Analytics[]
}

model LicenseRequest {
  id         String @id @default(cuid())
  identifier String @unique

  repository    Installation @relation(fields: [repository_id], references: [id], onDelete: Cascade)
  repository_id Int

  contains_license Boolean @default(false)
  license_status   String // Valid values are valid, invalid, or null

  license_id      String
  license_content String

  pull_request    String
  pull_request_id Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Ping {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
}

model codeMetadata {
  id         String @id @default(cuid())
  identifier String @unique

  repository    Installation @relation(fields: [repository_id], references: [id], onDelete: Cascade)
  repository_id Int

  codemeta_status   String // Valid values are valid, invalid, or null
  contains_codemeta Boolean @default(false)

  citation_status   String // Valid values are valid, invalid, or null
  contains_citation Boolean @default(false)

  contains_metadata Boolean @default(false) // True if both citation and codemeta are valid

  metadata Json @default("{}")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model CwlValidation {
  id String @id @default(cuid())

  repository    Installation @relation(fields: [repository_id], references: [id], onDelete: Cascade)
  repository_id Int

  contains_cwl_files Boolean @default(false)
  overall_status     String // Valid values are valid, invalid, or null

  files Json @default("[]")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Analytics {
  id String @id @default(cuid())

  repository    Installation @relation(fields: [repository_id], references: [id], onDelete: Cascade)
  repository_id Int

  cwl_validated_file_count Int @default(0)

  license_created Int @default(0)

  update_codemeta Int @default(0)
  update_citation Int @default(0)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}
